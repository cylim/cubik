generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider     = "mysql"
  url          = env("PROD_DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                String             @id @default(uuid()) @map("_id")
  username          String             @unique
  mainWallet        String             @unique
  email             String?
  profileNft        Json?
  rank              Int                @default(0)
  isMigrated        Boolean            @default(false)
  type              UserType           @default(Contributor)
  profilePicture    String             @db.VarChar(500)
  tx                String             @db.VarChar(500)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  isEmailConfirmed  Boolean            @default(false)
  isReceivingUpdate Boolean            @default(true)
  isActive          Boolean            @default(true)
  isArchive         Boolean            @default(false)
  comments          Comments[]
  reply             Reply[]
  contribution      Contribution[]
  team              Team[]
  proof             Proof[]
  project           Project[]
  adminAccess       AdminAccess[]
  activity          Activity[]
  communityMembers  CommunityMembers[]
  notification      Notification[]
  event             Event[]
  sponsorTeam       SponsorTeam[]
  sponsor           Sponsor[]

  @@fulltext([username])
}

model Communities {
  id               String             @id @default(uuid()) @map("_id")
  name             String
  logo             String             @db.VarChar(500)
  background       String             @db.VarChar(500)
  shortDescription String             @db.VarChar(2000)
  method           COMM
  collection       Json?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  isArchive        Boolean            @default(true)
  communityMembers CommunityMembers[]
}

model CommunityMembers {
  id          String      @id @default(uuid()) @map("_id")
  userId      String
  communityId String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  isActive    Boolean     @default(true)
  user        User        @relation(fields: [userId], references: [id])
  community   Communities @relation(fields: [communityId], references: [id])

  @@index([userId])
  @@index([communityId])
}

model Activity {
  id        String       @id @default(uuid()) @map("_id")
  userId    String
  type      ActivityType
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  isActive  Boolean      @default(true)
  isArchive Boolean      @default(false)
  data      Json
  user      User         @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Notification {
  id        String           @id @default(uuid()) @map("_id")
  userId    String
  type      NotificationType
  isRead    Boolean          @default(false)
  data      Json
  isActive  Boolean          @default(true)
  isArchive Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Proof {
  id        String    @id @default(uuid()) @map("_id")
  userId    String
  proofType ProofType
  proofInfo Json
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isActive  Boolean   @default(true)
  isArchive Boolean   @default(false)
  user      User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Project {
  id                String              @id @default(uuid()) @map("_id")
  name              String
  slug              String?             @default("")
  slides            Json?
  shortDescription  String              @db.VarChar(2000)
  logo              String              @db.VarChar(1000)
  ownerPublickey    String
  isMigrated        Boolean             @default(false)
  isDraft           Boolean             @default(false)
  tx                String              @default("")
  longDescription   String              @db.Text
  industry          Json?
  projectLink       String              @default("")
  twitterHandle     String              @default("")
  githubLink        String              @default("")
  discordLink       String              @default("")
  telegramLink      String              @default("")
  projectUserCount  Int                 @default(0)
  status            ProjectVerifyStatus @default(REVIEW)
  isOpenSource      Boolean?            @default(false)
  failedReason      String?             @default("")
  multiSigAddressV3 String?             @default("")
  multiSigPDAV4     String?             @default("")
  email             String              @default("")
  createKeyV3       String?             @default("")
  createKey         String?             @default("")
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  isArchive         Boolean             @default(false)
  owner             User                @relation(fields: [ownerPublickey], references: [mainWallet])
  comments          Comments[]
  contribution      Contribution[]
  team              Team[]
  projectJoinEvent  ProjectJoinEvent[]

  @@index([ownerPublickey])
  @@fulltext([name])
}

model Event {
  id               String             @id @default(uuid()) @map("_id")
  name             String
  slug             String             @unique
  background       String?            @default("")
  logo             String?            @default("")
  matchedPool      Float              @default(0)
  userId           String
  type             EventType
  description      String             @db.Text
  shortDescription String             @default("") @db.VarChar(2000)
  tx               String             @db.VarChar(500)
  isArchive        Boolean            @default(false)
  isPaused         Boolean            @default(false)
  isActive         Boolean            @default(true)
  eventStatus      EventStatus[]
  user             User               @relation(fields: [userId], references: [id])
  sponsor          Sponsor[]
  contribution     Contribution[]
  adminAccess      AdminAccess[]
  projectJoinEvent ProjectJoinEvent[]

  @@index([userId])
}

model EventStatus {
  id        String          @id @default(uuid()) @map("_id")
  isArchive Boolean         @default(false)
  status    EventStatusType
  startTime DateTime
  endTime   DateTime
  eventId   String
  event     Event           @relation(fields: [eventId], references: [id])

  @@index([eventId])
}

model ProjectJoinEvent {
  id                    String             @id @default(uuid()) @map("_id")
  eventId               String   
  projectId             String
  tx                    String             @db.VarChar(500)
  type                  EventType
  amount                Float              @default(0)
  communityContribution Float              @default(0)
  projectEventStatus    ProjectEventStatus @default(PENDING)
  isActive              Boolean            @default(true)
  isArchive             Boolean            @default(false)
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  project               Project            @relation(fields: [projectId], references: [id])
  event                 Event              @relation(fields: [eventId], references: [id])
  contribution          Contribution[]

  @@index([eventId])
  @@index([projectId])
}

model Sponsor {
  id             String           @id @default(uuid()) @map("_id")
  name           String // namne of sponsor
  type           SponsorType      @default(INDIVIDUAL)
  multisigPDA    String
  eventId        String
  paidToken      Json
  isPublic       Boolean          @default(true)
  totalCommitted Float            @default(0) 
  selfCustody    Boolean          @default(false)
  tx             String           @db.VarChar(500)
  logo           String?          @db.VarChar(500)
  isArchive      Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  event          Event            @relation(fields: [eventId], references: [id])
  team           SponsorTeam[]
  userId         String
  user           User             @relation(fields: [userId], references: [id]) 
  treasuryAssets TreasuryAssets[]

  @@index([eventId])
  @@index([userId])
}

model TreasuryAssets {
  id           String   @id @default(uuid()) @map("_id")
  sponsorId    String
  tokenAddress String
  amount       Float   @default(0)
  tx           String?  @db.VarChar(500)
  isArchive    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  sponsor      Sponsor @relation(fields: [sponsorId], references: [id])

  @@index([sponsorId])
}

model SponsorTeam {
  id        String  @id @default(uuid()) @map("_id")
  userId    String
  tx        String
  sponsorId String
  user      User    @relation(fields: [userId], references: [id])
  sponsor   Sponsor @relation(fields: [sponsorId], references: [id])

  @@index([userId])
  @@index([sponsorId])
}

model Team {
  id          String   @id @default(uuid()) @map("_id")
  userId      String
  projectId   String?
  createdAt   DateTime @default(now())
  desgination String?
  updatedAt   DateTime @updatedAt
  isActive    Boolean  @default(true)
  isArchive   Boolean  @default(false)
  user        User     @relation(fields: [userId], references: [id])
  project     Project? @relation(fields: [projectId], references: [id])

  @@index([projectId])
  @@index([userId])
}

model Contribution {
  id                 String            @id @default(uuid()) @map("_id")
  tx                 String            @db.VarChar(500)
  token              String
  split              Float
  projectId          String
  userId             String
  totalAmount        Float
  totalUsdAmount     Float
  isIncluded         Boolean           @default(false)
  isArchive          Boolean           @default(false)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  eventId            String?
  projectJoinEventId String?
  user               User              @relation(fields: [userId], references: [id])
  project            Project           @relation(fields: [projectId], references: [id])
  event              Event?            @relation(fields: [eventId], references: [id])
  projectJoinEvent   ProjectJoinEvent? @relation(fields: [projectJoinEventId], references: [id])

  @@index([projectId])
  @@index([userId])
  @@index([eventId])
  @@index([projectJoinEventId])
}

model Comments {
  id        String   @id @default(uuid()) @map("_id")
  comment   String   @db.Text
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isArchive Boolean  @default(false)
  reactions Json
  projectId String
  reply     Reply[]
  user      User     @relation(fields: [userId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])

  @@index([userId])
  @@index([projectId])
}

model Reply {
  id          String    @id @default(uuid()) @map("_id")
  reply       String    @db.Text
  commentId   String
  replyUserId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  comment     Comments? @relation(fields: [commentId], references: [id])
  user        User      @relation(fields: [replyUserId], references: [id])

  @@index([commentId])
  @@index([replyUserId])
}

model AdminAccess {
  id        String   @id @default(uuid()) @map("_id")
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)
  eventId   String?
  user      User     @relation(fields: [userId], references: [id])
  event     Event?   @relation(fields: [eventId], references: [id])

  @@index([userId])
  @@index([eventId])
}

enum EventType {
  ROUND
  HACKATHON
}

enum UserType {
  Contributor
  ProjectOwner
  Sponsor
}

enum SponsorType {
  ORGANIZATION
  INDIVIDUAL
}

enum ProofType {
  SUPERTEAM
  GITHUB
  TWITTER
  CIVIC
  CUBIK_POAPS
  CUBIK_PARTICIPANT
  CUBIK_TEAM
  SNS_DOMAIN
  DISCORD
  SOL_POSSION
  BLUE_CHIP_HOLDER
  DEFI_INTERACTION
}

enum ProjectVerifyStatus {
  REVIEW
  VERIFIED
  FAILED
}

enum ProjectEventStatus {
  PENDING
  APPROVED
  REJECTED
}

enum COMM {
  DISCORD
  MINT_ADD
  LIST_ADD
}

enum ActivityType {
  WELCOME
  CREATE_NEW_PROJECT
  PROJECT_STATUS_APPROVED
  PROJECT_STATUS_REJECTED
  PROJECT_JOIN_ROUND
  PROJECT_JOIN_ROUND_APPROVED
  PROJECT_JOIN_ROUND_REJECTED
  PROOF_COLLECTED
  PROJECT_BAN_IN_ROUND
  CONTRIBUTION_TO_PROJECT
  CONTRIBUTION_TO_USER
  GENERIC
  OTP_VERIFIED
}

enum NotificationType {
  PROJECT_STATUS_APPROVED
  PROJECT_STATUS_REJECTED
  CONTRIBUTION_TO_PROJECT
  CONTRIBUTION_TO_USER
  PROJECT_JOIN_ROUND_APPROVED
  PROJECT_JOIN_ROUND_REJECTED
}

enum EventStatusType {
  REGISTRATION
  VOTING
}
