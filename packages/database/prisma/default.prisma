generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch", "driverAdapters"]
}

datasource db {
  provider     = "mysql"
  url          = env("PROD_DATABASE_URL")
  relationMode = "prisma"
}

// generator zod {
//   provider      = "zod-prisma"
//   output        = "../zod"
//   relationModel = "default"
// }

model User {
  id               String             @id @default(uuid()) @map("_id")
  username         String?            @unique
  mainWallet       String             @unique
  email            String?
  profileNft       Json?
  profilePicture   String?            @db.VarChar(500)
  tx               String?            @db.VarChar(500)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  isActive         Boolean            @default(true)
  isArchive        Boolean            @default(false)
  session          Session[]
  comments         Comments[]
  reply            Reply[]
  contribution     Contribution[]
  team             Team[]
  proof            Proof[]
  project          Project[]
  AdminAccess      AdminAccess[]
  Activity         Activity[]
  CommunityMembers CommunityMembers[]
  Notification     Notification[]
  Event            Event[]
  SponsorTeam      SponsorTeam[]

  @@fulltext([username])
}

model Communities {
  id               String             @id @default(uuid()) @map("_id")
  name             String
  logo             String             @db.VarChar(500)
  background       String             @db.VarChar(500)
  shortDescription String             @db.VarChar(2000)
  method           COMM
  collection       Json?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  isArchive        Boolean            @default(true)
  CommunityMembers CommunityMembers[]
}

model CommunityMembers {
  id          String      @id @default(uuid()) @map("_id")
  userId      String
  communityId String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id])
  community   Communities @relation(fields: [communityId], references: [id])
  isActive    Boolean     @default(true)

  @@index([userId])
  @@index([communityId])
}

model Activity {
  id        String       @id @default(uuid()) @map("_id")
  userId    String
  type      ActivityType
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  isActive  Boolean      @default(true)
  isArchive Boolean      @default(false)
  user      User         @relation(fields: [userId], references: [id])
  data      Json

  @@index([userId])
}

model Notification {
  id     String           @id @default(uuid()) @map("_id")
  userId String
  type   NotificationType
  isRead Boolean          @default(false)
  user   User             @relation(fields: [userId], references: [id])
  data   Json

  isActive  Boolean  @default(true)
  isArchive Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Proof {
  id        String    @id @default(uuid()) @map("_id")
  userId    String
  proofType ProofType
  proofInfo Json
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isActive  Boolean   @default(true)
  isArchive Boolean   @default(false)
  user      User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Session {
  id        String   @id @default(uuid())
  ipAddress String
  userAgent String
  latitude  String   @default("0")
  longitude String   @default("0")
  country   String   @default("default")
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Project {
  id                 String              @id @default(uuid()) @map("_id")
  name               String
  slug               String?             @default("")
  slides             Json?
  shortDescription   String              @db.VarChar(2000)
  logo               String              @db.VarChar(1000)
  ownerPublickey     String
  tx                 String              @default("")
  longDescription    String              @db.Text
  industry           String              @db.VarChar(2000)
  projectLink        String              @default("")
  twitterHandle      String              @default("")
  githubLink         String              @default("")
  discordLink        String              @default("")
  telegramLink       String              @default("")
  projectUserCount   Int                 @default(0)
  status             ProjectVerifyStatus @default(REVIEW)
  failedReason       String?             @default("")
  mutliSigAddress    String?             @default("")
  multiSigAddress_v3 String?             @default("")
  multiSigAddress_v4 String?             @default("")
  email              String              @default("")
  createKey          String?             @default("")
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  isActive           Boolean             @default(true)
  isArchive          Boolean             @default(false)
  owner              User                @relation(fields: [ownerPublickey], references: [mainWallet])
  comments           Comments[]
  contribution       Contribution[]
  team               Team[]
  projectEventJoin   ProjectEventJoin[]

  @@index([ownerPublickey])
}

model Event {
  id               String             @id @default(uuid()) @map("_id")
  name             String
  slug             String?            @unique
  background       String?            @default("")
  logo             String?            @default("")
  matchedPool      Float              @default(0)
  userId           String
  type             EventType
  description      String             @db.Text
  shortDescription String             @default("") @db.VarChar(2000)
  isActive         Boolean            @default(true)
  isArchive        Boolean            @default(false)
  tx               String             @db.VarChar(500)
  timeline         Json
  user             User               @relation(fields: [userId], references: [id])
  sponsor          Sponsor[]
  contribution     Contribution[]
  adminAccess      AdminAccess[]
  projectEventJoin ProjectEventJoin[]

  @@index([userId])
}

model ProjectEventJoin {
  id                    String             @id @default(uuid()) @map("_id")
  eventId               String
  type                  EventType
  projectEventStatus    ProjectEventStatus @default(PENDING)
  amount                Float              @default(0)
  communityContribution Float              @default(0)
  project               Project            @relation(fields: [projectId], references: [id])
  event                 Event              @relation(fields: [eventId], references: [id])
  projectId             String
  tx                    String             @db.VarChar(500)
  isActive              Boolean            @default(true)
  isArchive             Boolean            @default(false)
  contribution          Contribution[]

  @@index([eventId])
  @@index([projectId])
}

model Sponsor {
  id             String        @id @default(uuid()) @map("_id")
  name           String
  logo           String        @db.VarChar(500)
  tx             String        @db.VarChar(500)
  eventId        String?
  vault          String
  paidToken      Json
  totalCommitted Float         @default(0)
  isActive       Boolean       @default(true)
  isArchive      Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  event          Event?        @relation(fields: [eventId], references: [id])
  team           SponsorTeam[]

  @@index([eventId])
}

model SponsorTeam {
  id        String  @id @default(uuid()) @map("_id")
  userId    String
  tx        String
  sponsorId String
  user      User    @relation(fields: [userId], references: [id])
  sponsor   Sponsor @relation(fields: [sponsorId], references: [id])

  @@index([userId])
  @@index([sponsorId])
}

model Team {
  id        String   @id @default(uuid()) @map("_id")
  userId    String
  projectId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)
  isArchive Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  project   Project? @relation(fields: [projectId], references: [id])

  @@index([projectId])
  @@index([userId])
}

model Contribution {
  id                 String            @id @default(uuid()) @map("_id")
  tx                 String            @db.VarChar(500)
  token              String
  split              Float
  projectId          String
  userId             String
  totalAmount        Float
  totalUsdAmount     Float
  isIncluded         Boolean           @default(false)
  isArchive          Boolean           @default(false)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  user               User              @relation(fields: [userId], references: [id])
  project            Project           @relation(fields: [projectId], references: [id])
  event              Event?            @relation(fields: [eventId], references: [id])
  eventId            String?
  projectEventJoin   ProjectEventJoin? @relation(fields: [projectEventJoinId], references: [id])
  projectEventJoinId String?

  @@index([projectId])
  @@index([userId])
  @@index([eventId])
  @@index([projectEventJoinId])
}

model Comments {
  id        String   @id @default(uuid()) @map("_id")
  comment   String   @db.Text
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isArchive Boolean  @default(false)
  reactions Json
  projectId String
  reply     Reply[]
  user      User     @relation(fields: [userId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])

  @@index([userId])
  @@index([projectId])
}

model Reply {
  id          String    @id @default(uuid()) @map("_id")
  reply       String    @db.Text
  commentId   String
  replyUserId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  comment     Comments? @relation(fields: [commentId], references: [id])
  user        User      @relation(fields: [replyUserId], references: [id])

  @@index([commentId])
  @@index([replyUserId])
}

model AdminAccess {
  id        String   @id @default(uuid()) @map("_id")
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  isActive  Boolean  @default(true)
  Event     Event?   @relation(fields: [eventId], references: [id])
  eventId   String?

  @@index([userId])
  @@index([eventId])
}

enum EventType {
  ROUND
  HACKATHON
}

enum SponsorShipTier {
  PLATINUM
  GOLD
  SILVER
  BRONZE
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
}

enum UserSybilStatus {
  NONE
  NEW_WALLET
  DEAD_WALLET
  ELUSIVE_WALLET
  CEX_WALLET
  CONFIRMED
}

enum ProofType {
  SUPERTEAM
  GITHUB
  TWITTER
  CIVIC
  CUBIK_POAPS
  CUBIK_PARTICIPANT
  CUBIK_TEAM
  SNS_DOMAIN
  DISCORD
  SOL_POSSION
  BLUE_CHIP_HOLDER
  DEFI_INTERACTION
}

enum ProjectVerifyStatus {
  REVIEW
  VERIFIED
  FAILED
}

enum ProjectEventStatus {
  PENDING
  APPROVED
  REJECTED
}

enum COMM {
  DISCORD
  MINT_ADD
  LIST_ADD
}

enum ActivityType {
  WELCOME
  CREATE_NEW_PROJECT
  PROJECT_STATUS_APPROVED
  PROJECT_STATUS_REJECTED
  PROJECT_JOIN_ROUND
  PROJECT_JOIN_ROUND_APPROVED
  PROJECT_JOIN_ROUND_REJECTED
  PROOF_COLLECTED
  PROJECT_BAN_IN_ROUND
  CONTRIBUTION_TO_PROJECT
  CONTRIBUTION_TO_USER
  GENERIC
}

enum NotificationType {
  PROJECT_STATUS_APPROVED
  PROJECT_STATUS_REJECTED
  CONTRIBUTION_TO_PROJECT
  CONTRIBUTION_TO_USER
  PROJECT_JOIN_ROUND_APPROVED
  PROJECT_JOIN_ROUND_REJECTED
}
